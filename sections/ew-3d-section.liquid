{% schema %}
{
  "name": "3D Hero Section",
  "settings": [
    {
      "type": "color",
      "id": "section_bg_color",
      "label": "Background Color",
      "default": "#000000"
    }
  ],
  "presets": [
    {
      "name": "3D Hero Section"
    }
  ]
}
{% endschema %}

<style>
  .ew-3d-section {
    width: 100%;
    height: 100vh;
    position: relative;
    background-color: {{ section.settings.section_bg_color }};
    overflow: hidden;
  }

  .ew-3d-canvas {
    width: 100%;
    height: 100%;
    display: block;
  }

  .ew-3d-overlay {
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    text-align: center;
    z-index: 2;
    color: white;
  }

  .ew-3d-overlay h1 {
    font-size: clamp(3rem, 8vw, 7rem);
    text-transform: uppercase;
    margin-bottom: 1rem;
    opacity: 0;
  }

  .ew-3d-overlay a {
    display: inline-block;
    background: white;
    color: black;
    padding: 1rem 2rem;
    border-radius: 5px;
    text-decoration: none;
    font-weight: bold;
    font-size: 1.2rem;
    opacity: 0;
  }

  .ew-3d-overlay h1,
.ew-3d-overlay a {
  transform: translateY(20px);
  opacity: 0;
}

</style>

<div class="ew-3d-section">
  <canvas id="three-canvas" class="ew-3d-canvas"></canvas>
  <div class="ew-3d-overlay">
    <h1>3D Hero</h1>
    <a href="#shop">Explore Now</a>
  </div>
</div>

<script>
window.addEventListener('load', function () {
  console.log("THREE loaded?", typeof THREE !== 'undefined');
  console.log("GLTFLoader loaded?", typeof THREE.GLTFLoader !== 'undefined');
  console.log("Three.js version:", THREE.REVISION);

  if (typeof THREE === 'undefined' || typeof THREE.GLTFLoader === 'undefined') {
    console.warn('❌ Three.js or GLTFLoader is not loaded.');
    return;
  }

  // Your original model + GSAP animation code here
  const canvas = document.getElementById('three-canvas');
  const scene = new THREE.Scene();
  const camera = new THREE.PerspectiveCamera(75, canvas.clientWidth / canvas.clientHeight, 0.1, 1000);
  const renderer = new THREE.WebGLRenderer({ canvas, alpha: true, antialias: true });
  renderer.setSize(window.innerWidth, window.innerHeight);
  camera.position.z = 3;

  // Light
  const ambientLight = new THREE.AmbientLight(0xffffff, 1.5);
  scene.add(ambientLight);

  // Load model
  const loader = new THREE.GLTFLoader();
  loader.load(
    'https://cdn.shopify.com/3d/models/cfba46f45132959a/_ChronoForgeWeapon_0620124224_texture.glb',
    function (gltf) {
      const model = gltf.scene;
      scene.add(model);

      model.rotation.y = Math.PI;

      // Animate entrance
      gsap.fromTo(model.rotation, 
        { y: model.rotation.y - 0.5 },
        { y: model.rotation.y, duration: 2, ease: 'power3.out' }
      );

      gsap.to('.ew-3d-overlay h1', {
        opacity: 1,
        y: 0,
        duration: 1.2,
        ease: 'power2.out',
        delay: 1.5
      });

      gsap.to('.ew-3d-overlay a', {
        opacity: 1,
        y: 0,
        duration: 1.2,
        ease: 'power2.out',
        delay: 2
      });

      // Animate loop
      function animate() {
        requestAnimationFrame(animate);
        model.rotation.y += 0.002;
        renderer.render(scene, camera);
      }
      animate();
    },
    undefined,
    function (error) {
      console.error('Error loading GLB model:', error);
    }
  );

  // Responsive canvas
  window.addEventListener('resize', () => {
    camera.aspect = window.innerWidth / window.innerHeight;
    camera.updateProjectionMatrix();
    renderer.setSize(window.innerWidth, window.innerHeight);
  });
});
</script>


